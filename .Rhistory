print('1')
}
if(length(gdChannelID) == 1){
print('1')
}else if(length(gdChannelID) == 2){
print('2')
}else if(length(gdChannelID) >=2){
print('3')
}
if(length(gdChannelID) == 1){
errorCondition('Gd Cleaning cannot perform with only one Gd channel')
}else if(length(gdChannelID) == 2){
print('2 Gd Cleaning detected, the lower expression one will be select as contamination coefficient')
}else if(length(gdChannelID) >=2){
print('')
}
gdChannelID = 1
if(length(gdChannelID) == 1){
errorCondition('Gd Cleaning cannot perform with only one Gd channel')
}else if(length(gdChannelID) == 2){
print('2 Gd Cleaning detected, the lower expression one will be select as contamination coefficient')
}else if(length(gdChannelID) >=2){
print('')
}
gdChannelID = 2
if(length(gdChannelID) == 1){
errorCondition('Gd Cleaning cannot perform with only one Gd channel')
}else if(length(gdChannelID) == 2){
print('2 Gd Cleaning detected, the lower expression one will be select as contamination coefficient')
}else if(length(gdChannelID) >=2){
print('')
}
gdChannelID = c(1,2)
if(length(gdChannelID) == 1){
errorCondition('Gd Cleaning cannot perform with only one Gd channel')
}else if(length(gdChannelID) == 2){
print('2 Gd Cleaning detected, the lower expression one will be select as contamination coefficient')
}else if(length(gdChannelID) >=2){
print('')
}
gdChannelID = c(1,2,3)
if(length(gdChannelID) == 1){
errorCondition('Gd Cleaning cannot perform with only one Gd channel')
}else if(length(gdChannelID) == 2){
print('2 Gd Cleaning detected, the lower expression one will be select as contamination coefficient')
}else if(length(gdChannelID) >=2){
print('')
}
sampleNames(fs)
names(keyword(x))
keyword(fs)
combn(gdChannelID,2)
library(flowCore)
library(stringr)
x = read.FCS('../RawData/L2_31_Gd.fcs',transformation = F,alter.names = T)
fs = as(x,'flowSet')
markerPanel = fs[[1]]@parameters@data
gdChannelID = str_which(markerPanel$name,'^Gd')
gdChannelName = markerPanel$desc[gdChannelID]
gdChannelNameAll = paste(gdChannelName,collapse = ' ')
print(paste0(length(gdChannelID),' Gadolinium Channels Selected: ',gdChannelNameAll))
if(length(gdChannelID) == 1){
errorCondition('Gd Cleaning cannot perform with only one Gd channel')
}else if(length(gdChannelID) == 2){
print('2 Gd Cleaning detected, the lower expression one will be select as contamination coefficient')
}else if(length(gdChannelID) >=2){
print('')
}
combn(gdChannelID,2)
channelPairs = combn(length(gdChannelID),2)
channelPairs
dim(channelPairs)[2]
ii = 1
idTmp = channelPairs[,ii]
dataTmp_1 = data[,gdChannelID[idTmp[1]]]
dataTmp_2 = data[,gdChannelID[idTmp[2]]]
idTmp = channelPairs[,ii]
idTmp[1]
gdChannelID
gdChannelID[idTmp[1]]
data = fs[[1]]@exprs
idTmp = channelPairs[,ii]
dataTmp_1 = data[,gdChannelID[idTmp[1]]]
dataTmp_2 = data[,gdChannelID[idTmp[2]]]
gdChannelName[idTmp[1]]
gdChannelName[idTmp[2]]
name1 = gdChannelName[idTmp[1]]
name2 = gdChannelName[idTmp[2]]
tmp = data.frame(data1 = dataTmp_1,data2 = dataTmp_2)
p1 = ggscatter(tmp,x = 'data1',y = 'data2',title = "",add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"),
cor.coeff.args = list(method = "pearson",size = 2),
conf.int = TRUE,cor.coef = TRUE, cor.method = "spearson",size = 1,font.label = c(5,'plain')) +
theme(plot.title = element_text(hjust = 0.5),legend.title=element_blank(),legend.position = "right",
axis.title = element_text(size = 8),axis.text = element_text(size=8)) +
xlab(name1) + ylab(name2)
p1
library(ggplot2)
library(ggpubr)
name1 = gdChannelName[idTmp[1]]
name2 = gdChannelName[idTmp[2]]
tmp = data.frame(data1 = dataTmp_1,data2 = dataTmp_2)
p1 = ggscatter(tmp,x = 'data1',y = 'data2',title = "",add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"),
cor.coeff.args = list(method = "pearson",size = 2),
conf.int = TRUE,cor.coef = TRUE, cor.method = "spearson",size = 1,font.label = c(5,'plain')) +
theme(plot.title = element_text(hjust = 0.5),legend.title=element_blank(),legend.position = "right",
axis.title = element_text(size = 8),axis.text = element_text(size=8)) +
xlab(name1) + ylab(name2)
p1
name1 = gdChannelName[idTmp[1]]
name2 = gdChannelName[idTmp[2]]
tmp = data.frame(data1 = dataTmp_1,data2 = dataTmp_2)
p1 = ggscatter(tmp,x = 'data1',y = 'data2',title = "",add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"),
cor.coeff.args = list(method = "pearson",size = 2),
conf.int = TRUE,cor.coef = TRUE, cor.method = "pearson",size = 1,font.label = c(5,'plain')) +
theme(plot.title = element_text(hjust = 0.5),legend.title=element_blank(),legend.position = "right",
axis.title = element_text(size = 8),axis.text = element_text(size=8)) +
xlab(name1) + ylab(name2)
p1
p1
channelPairs = combn(length(gdChannelID),2)
channelPairs = combn(gdChannelID,2)
CorrList =list()
channelPairs
length(fs)
channelPairs = combn(gdChannelID,2)
corrHeatmap = matrix(0,length(fs),dim(channelPairs)[2])
names(fs)
fs
sampleNames(fs)
fs[['V1']]
sampleID = sampleNames(fs)
sampleData =fs[[ii]]@exprs
corr(sampleData[,gdChannelID])
cor(sampleData[,gdChannelID])
sampleData =fs[[ii]]@exprs
corrTmp = apply(channelPairs, 2, function(x){
y = cor(sampleData[,x[1]],sampleData[,x[2]])
})
corrTmp
channelPairs = combn(gdChannelID,2)
corrHeatmap = matrix(0,length(fs),dim(channelPairs)[2])
sampleID = sampleNames(fs)
for (ii in length(fs)) {
sampleData =fs[[ii]]@exprs
corrTmp = apply(channelPairs, 2, function(x){
y = cor(sampleData[,x[1]],sampleData[,x[2]])
})
corrHeatmap[ii,] = corrTmp
}
markerName = fs[[1]]@parameters@data$desc[gdChannelID]
markerName = fs[[1]]@parameters@data$desc[gdChannelID]
markerName
name1 = markerName[channelPairs[1,]]
name2 = markerName[channelPairs[2,]]
name1
markerName
markerName = fs[[1]]@parameters@data$desc
name1 = markerName[channelPairs[1,]]
name2 = markerName[channelPairs[2,]]
name1
name2
pairName = paste(name1,name2,sep = '_')
pairName
rownames(corrHeatmap) = sampleID
channelPairs = combn(gdChannelID,2)
corrHeatmap = matrix(0,length(fs),dim(channelPairs)[2])
sampleID = sampleNames(fs)
for (ii in length(fs)) {
sampleData =fs[[ii]]@exprs
corrTmp = apply(channelPairs, 2, function(x){
y = cor(sampleData[,x[1]],sampleData[,x[2]])
})
corrHeatmap[ii,] = corrTmp
}
markerName = fs[[1]]@parameters@data$desc
name1 = markerName[channelPairs[1,]]
name2 = markerName[channelPairs[2,]]
pairName = paste(name1,name2,sep = '_')
rownames(corrHeatmap) = sampleID
colnames(corrHeatmap) = pairName
library(pheatmap)
pheatmap(corrHeatmap)
pheatmap(corrHeatmap,
cluster_rows = F,cluster_cols = F)
pheatmap(corrHeatmap,
cluster_rows = F,cluster_cols = F,
color = c("blue",'white', "red"),
breaks = c(-1, 0, 1))
breaksList = seq(-1, 1, by = 0.1)
breaksList
library(RColorBrewer)
breaksList = seq(-1, 1, by = 0.1)
colorList = colorRampPalette(rev(brewer.pal(7,"RdYlBu")))(breaksList)
pheatmap(corrHeatmap,
cluster_rows = F,cluster_cols = F,
color = colorList,
breaks = breaksList)
breaksList = seq(-1, 1, by = 0.1)
colorList = colorRampPalette(rev(brewer.pal(7,"RdYlBu")))(length(breaksList))
pheatmap(corrHeatmap,
cluster_rows = F,cluster_cols = F,
color = colorList,
breaks = breaksList)
breaksList = seq(-1, 1, by = 0.1)
colorList = colorRampPalette(rev(brewer.pal(7,"RdYlBu")))(length(breaksList))
p1 = pheatmap(corrHeatmap,
cluster_rows = F,cluster_cols = F,
color = colorList,
breaks = breaksList,angle_col = 45)
p1
p1 = pheatmap(corrHeatmap,
cluster_rows = F,cluster_cols = F,
color = colorList,
breaks = breaksList,angle_col = 90)
p1
return(p1)
GdCorrHeatmap = function(fs,gdChannelID){
channelPairs = combn(gdChannelID,2)
corrHeatmap = matrix(0,length(fs),dim(channelPairs)[2])
sampleID = sampleNames(fs)
for (ii in length(fs)) {
sampleData =fs[[ii]]@exprs
corrTmp = apply(channelPairs, 2, function(x){
y = cor(sampleData[,x[1]],sampleData[,x[2]])
})
corrHeatmap[ii,] = corrTmp
}
markerName = fs[[1]]@parameters@data$desc
name1 = markerName[channelPairs[1,]]
name2 = markerName[channelPairs[2,]]
pairName = paste(name1,name2,sep = '_')
rownames(corrHeatmap) = sampleID
colnames(corrHeatmap) = pairName
breaksList = seq(-1, 1, by = 0.1)
colorList = colorRampPalette(rev(brewer.pal(7,"RdYlBu")))(length(breaksList))
p1 = pheatmap(corrHeatmap,
cluster_rows = F,cluster_cols = F,
color = colorList,
breaks = breaksList,angle_col = 90)
p1
return(p1)
}
GdCorrHeatmap(fs,gdChannelID)
p1 = GdCorrHeatmap(fs,gdChannelID)
frames = lapply(dir(fcs.dir,full.names = T), read.FCS(transformation = F))
frames = lapply(dir(fcs.dir,full.names = T), read.FCS,transformation = F,alter.names = T)
fcs.dir = '../RawData/'
frames = lapply(dir(fcs.dir,full.names = T), read.FCS,transformation = F,alter.names = T)
fs = as(frames,'flowSet')
markerPanel = fs[[1]]@parameters@data
gdChannelID = str_which(markerPanel$name,'^Gd')
gdChannelName = markerPanel$desc[gdChannelID]
gdChannelNameAll = paste(gdChannelName,collapse = ' ')
print(paste0(length(gdChannelID),' Gadolinium Channels Selected: ',gdChannelNameAll))
if(length(gdChannelID) == 1){
errorCondition('Gd Cleaning cannot perform with only one Gd channel')
}else if(length(gdChannelID) == 2){
print('2 Gd Cleaning detected, the lower expression one will be select as contamination coefficient')
}else if(length(gdChannelID) >=2){
print('')
}
p1 = GdCorrHeatmap(fs,gdChannelID)
p1
sampleNames(fs)
fs
fs[[6]]
sapply(frames, keyword, "SAMPLE ID")
frames
fcs.dir
dir(fcs.dir,full.names = T)
dir(fcs.dir)
dir(fcs.dir)
sapply(frames, keyword, "FILENAME")
channelPairs = combn(gdChannelID,2)
corrHeatmap = matrix(0,length(fs),dim(channelPairs)[2])
sampleID = sampleNames(fs)
channelPairs = combn(gdChannelID,2)
corrHeatmap = matrix(0,length(fs),dim(channelPairs)[2])
sampleID = sampleNames(fs)
for (ii in length(fs)) {
sampleData =fs[[ii]]@exprs
corrTmp = apply(channelPairs, 2, function(x){
y = cor(sampleData[,x[1]],sampleData[,x[2]])
})
corrHeatmap[ii,] = corrTmp
}
markerName = fs[[1]]@parameters@data$desc
name1 = markerName[channelPairs[1,]]
name2 = markerName[channelPairs[2,]]
pairName = paste(name1,name2,sep = '_')
rownames(corrHeatmap) = sampleID
colnames(corrHeatmap) = pairName
breaksList = seq(-1, 1, by = 0.1)
colorList = colorRampPalette(rev(brewer.pal(7,"RdYlBu")))(length(breaksList))
corrHeatmap
channelPairs = combn(gdChannelID,2)
corrHeatmap = matrix(0,length(fs),dim(channelPairs)[2])
sampleID = sampleNames(fs)
length(fs)
p1 = GdCorrHeatmap(fs,gdChannelID)
p1
GdCorrHeatmap = function(fs,gdChannelID){
channelPairs = combn(gdChannelID,2)
corrHeatmap = matrix(0,length(fs),dim(channelPairs)[2])
sampleID = sampleNames(fs)
for (ii in 1:length(fs)) {
sampleData =fs[[ii]]@exprs
corrTmp = apply(channelPairs, 2, function(x){
y = cor(sampleData[,x[1]],sampleData[,x[2]])
})
corrHeatmap[ii,] = corrTmp
}
markerName = fs[[1]]@parameters@data$desc
name1 = markerName[channelPairs[1,]]
name2 = markerName[channelPairs[2,]]
pairName = paste(name1,name2,sep = '_')
rownames(corrHeatmap) = sampleID
colnames(corrHeatmap) = pairName
breaksList = seq(-1, 1, by = 0.1)
colorList = colorRampPalette(rev(brewer.pal(7,"RdYlBu")))(length(breaksList))
p1 = pheatmap(corrHeatmap,
cluster_rows = F,cluster_cols = F,
color = colorList,
breaks = breaksList,angle_col = 90)
p1
return(p1)
}
p1 = GdCorrHeatmap(fs,gdChannelID)
p1 = pheatmap(corrHeatmap,
cluster_rows = F,cluster_cols = F,
color = colorList,
breaks = breaksList,angle_col = 90,
display_numbers = corrHeatmap)
p1
corrHeatmap
channelPairs = combn(gdChannelID,2)
corrHeatmap = matrix(0,length(fs),dim(channelPairs)[2])
sampleID = sampleNames(fs)
for (ii in 1:length(fs)) {
sampleData =fs[[ii]]@exprs
corrTmp = apply(channelPairs, 2, function(x){
y = cor(sampleData[,x[1]],sampleData[,x[2]])
})
corrHeatmap[ii,] = corrTmp
}
markerName = fs[[1]]@parameters@data$desc
name1 = markerName[channelPairs[1,]]
name2 = markerName[channelPairs[2,]]
pairName = paste(name1,name2,sep = '_')
rownames(corrHeatmap) = sampleID
colnames(corrHeatmap) = pairName
breaksList = seq(-1, 1, by = 0.1)
colorList = colorRampPalette(rev(brewer.pal(7,"RdYlBu")))(length(breaksList))
p1 = pheatmap(corrHeatmap,
cluster_rows = F,cluster_cols = F,
color = colorList,
breaks = breaksList,angle_col = 90,
display_numbers = corrHeatmap)
p1
p1 = pheatmap(corrHeatmap,
cluster_rows = F,cluster_cols = F,
color = colorList,
breaks = breaksList,angle_col = 90,
display_numbers = round(corrHeatmap,2))
p1
basename(dir(fcs.dir))
rm(list = ls())
rm(list = ls())
library(flowCore)
library(stringr)
library(ggplot2)
library(ggpubr)
library(pheatmap)
library(RColorBrewer)
fcs.dir = '../RawData/'
frames = lapply(dir(fcs.dir,full.names = T), read.FCS,transformation = F,alter.names = T)
names(frames) <- basename(dir(fcs.dir))
fs = as(frames,'flowSet')
markerPanel = fs[[1]]@parameters@data
gdChannelID = str_which(markerPanel$name,'^Gd')
gdChannelName = markerPanel$desc[gdChannelID]
gdChannelNameAll = paste(gdChannelName,collapse = ' ')
print(paste0(length(gdChannelID),' Gadolinium Channels Selected: ',gdChannelNameAll))
if(length(gdChannelID) == 1){
errorCondition('Gd Cleaning cannot perform with only one Gd channel')
}else if(length(gdChannelID) == 2){
print('2 Gd Cleaning detected, the lower expression one will be select as contamination coefficient')
}else if(length(gdChannelID) >=2){
print('')
}
sampleNames(fs)
p1 = GdCorrHeatmap(fs,gdChannelID)
GdCorrHeatmap = function(fs,gdChannelID){
channelPairs = combn(gdChannelID,2)
corrHeatmap = matrix(0,length(fs),dim(channelPairs)[2])
sampleID = sampleNames(fs)
for (ii in 1:length(fs)) {
sampleData =fs[[ii]]@exprs
corrTmp = apply(channelPairs, 2, function(x){
y = cor(sampleData[,x[1]],sampleData[,x[2]])
})
corrHeatmap[ii,] = corrTmp
}
markerName = fs[[1]]@parameters@data$desc
name1 = markerName[channelPairs[1,]]
name2 = markerName[channelPairs[2,]]
pairName = paste(name1,name2,sep = '_')
rownames(corrHeatmap) = sampleID
colnames(corrHeatmap) = pairName
breaksList = seq(-1, 1, by = 0.1)
colorList = colorRampPalette(rev(brewer.pal(7,"RdYlBu")))(length(breaksList))
p1 = pheatmap(corrHeatmap,
cluster_rows = F,cluster_cols = F,
color = colorList,
breaks = breaksList,angle_col = 90,
display_numbers = round(corrHeatmap,2))
p1
return(p1)
}
p1 = GdCorrHeatmap(fs,gdChannelID)
p1
?pheatmap
ff = fs[[1]]
ff
dataTmp = ff@exprs
dataTmp
dataTmp = ff@exprs
gdData = dataTmp[,gdChannelID]
dataTmp = ff@exprs
gdData = dataTmp[,gdChannelID]
dim(gdData)
markerName = ff@parameters@data$desc
markerName
gdMarker = markerName[gdChannelID]
gdMarker
5:5:100
seq(5:100,by = 5)
seq(from = 5,to = 100,by = 5)
gdChannelID
gdChannelID[2:length(gdChannelID)]
LinearCoeff = matrix(0,length(PercentList),length(PairChannel))
dataTmp = ff@exprs
gdData = dataTmp[,gdChannelID]
markerName = ff@parameters@data$desc
gdMarker = markerName[gdChannelID]
PercentList = seq(from = 5,to = 100,by = 5)
PairChannel = gdChannelID[2:length(gdChannelID)]
LinearCoeff = matrix(0,length(PercentList),length(PairChannel))
LinearCoeff
ii =
1
jj = 1
gdData_Sub = gdData %>% top_frac(n = PercentList[ii] / 100,wt = mean)
??top_frac
library(dplyr)
PercentList[ii] / 100
gdData_Sub = gdData %>% top_frac(n = PercentList[ii] / 100,wt = mean)
dataTmp = ff@exprs
gdData = dataTmp[,gdChannelID]
gdData$mean = rowMeans(gdData)
head(gdData)
dataTmp = ff@exprs
gdData = dataTmp[,gdChannelID]
head(gdData)
gdData = as.data.frame(gdData)
gdData$mean = rowMeans(gdData)
head(gdData)
PairChannel = 2:length(gdChannelID)
PairChannel
gdData_Sub = gdData %>% top_frac(n = PercentList[ii] / 100,wt = mean)
jj = 1
data1 = gdData_Sub[,1]
data2 = gdData_Sub[,PairChannel[jj]]
data1 = gdData_Sub[,1]
data2 = gdData_Sub[,PairChannel[jj]]
dataTmp = data.frame(baseChannel = data1,selectChannel = data2)
head(dataTmp)
data1 = gdData_Sub[,1]
data2 = gdData_Sub[,PairChannel[jj]]
dataTmp = data.frame(baseChannel = data1,selectChannel = data2)
lmResult = lm(selectChannel ~ baseChannel,data = dataTmp)
lmResult
lmResult$coefficients[2]
LinearCoeff = matrix(0,length(PercentList),length(PairChannel))
for (ii in length(PercentList)) {
gdData_Sub = gdData %>% top_frac(n = PercentList[ii] / 100,wt = mean)
for (jj in length(PairChannel)) {
data1 = gdData_Sub[,1]
data2 = gdData_Sub[,PairChannel[jj]]
dataTmp = data.frame(baseChannel = data1,selectChannel = data2)
lmResult = lm(selectChannel ~ baseChannel,data = dataTmp)
slope = lmResult$coefficients[2]
LinearCoeff[ii,jj] =slope
}
}
LinearCoeff
LinearCoeff = matrix(0,length(PercentList),length(PairChannel))
for (ii in 1:length(PercentList)) {
gdData_Sub = gdData %>% top_frac(n = PercentList[ii] / 100,wt = mean)
for (jj in 1:length(PairChannel)) {
data1 = gdData_Sub[,1]
data2 = gdData_Sub[,PairChannel[jj]]
dataTmp = data.frame(baseChannel = data1,selectChannel = data2)
lmResult = lm(selectChannel ~ baseChannel,data = dataTmp)
slope = lmResult$coefficients[2]
LinearCoeff[ii,jj] =slope
}
}
LinearCoeff
