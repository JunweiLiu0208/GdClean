gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio <- GdNatureTable[rownames(gdInfo), "Abundance"]
naturalRatio <- naturalRatio / naturalRatio[1]
if (is.null(gdRatio)) {
gdRatio <- naturalRatio
}
print(paste0("Gd Ratios = ", paste(gdRatio, collapse = ", ")))
if (length(gdChannelID) == 2) {
for (ii in 1:length(fs)) {
dataTmp <- fs[[ii]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
# estimate k
# only two Gd channels select the lower expression as contamination coefficient
estimatek <- apply(gdDataTmp, 1, min)
# remove Gd contamination
gdCompensate <- gdDataTmp - matrix(estimatek * gdRatio, dim(gdDataTmp)[1], dim(gdDataTmp)[2])
gdCompensate[gdCompensate < 0] <- 0 # remove negative values
gdCompensate <- gdCompensate + rnorm(length(gdRatio), 1, 1) # add noise
# replace expression data
dataTmp[, gdChannelID] <- gdCompensate
fs[[ii]]@exprs <- dataTmp
}
} else {
for (ii in 1:length(fs)) {
dataTmp <- fs[[ii]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
# estimate k
estimatek <- apply(gdDataTmp, 1, function(cellData) {
cellK <- 0
switch(method,
"1DNorm" = {
obj_1 <- function(x) {
y <- sum(abs(cellData - x * gdRatio))
}
res1 <- optimize(obj_1, interval = c(0, 10000))
res1 <- res1$minimum
cellK <- res1
},
"2DNorm" = {
obj_2 <- function(x) {
y <- sqrt(sum((cellData - x * gdRatio)^2))
}
res2 <- optimize(obj_2, interval = c(0, 10000))
res2 <- res2$minimum
cellK <- res2
},
"Min" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- min(k_vector)
},
"Mean" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- mean(k_vector)
},
"Median" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- median(k_vector)
}
)
return(cellK)
})
##
gdRatio = matrix(gdRatio,nrow = 1)
gdNoiseData = gdRatio[rep(1,length(estimatek)), ] * estimatek
gdCompensate <- gdDataTmp - gdNoiseData
gdCompensate[gdCompensate < 0] <- 0 # remove negative values
# t1 = table(gdCompensate[,1])
# noiseData = matrix(rnorm(dim(gdDataTmp)[1]*dim(gdDataTmp)[2], 1, 1),
#                    dim(gdDataTmp)[1], dim(gdDataTmp)[2])
# gdCompensate <- gdCompensate + noiseData # add noise
# replace expression data
dataTmp[, gdChannelID] <- gdCompensate
fs[[ii]]@exprs <- dataTmp
}
}
#' frames <- lapply(dir(fcs.dir, full.names = T), read.FCS, transformation = F, alter.names = T)
#' names(frames) <- basename(dir(fcs.dir))
#' fs <- as(frames, "flowSet")
#'
#' PercentList <- seq(5, 100, 5)
#' GdRatios <- estimateGdRatio(ff[[1]], percentList)
#'
#' gdRatio <- GdRatios["5%", ]
#' method <- "1DNorm"
#' fs_Clean <- GdClean(fs, gdRatio = gdRatio, method = method)
GdClean <- function(fs, gdRatio = NULL, method = "1DNorm") {
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio <- GdNatureTable[rownames(gdInfo), "Abundance"]
naturalRatio <- naturalRatio / naturalRatio[1]
if (is.null(gdRatio)) {
gdRatio <- naturalRatio
}
print(paste0("Gd Ratios = ", paste(gdRatio, collapse = ", ")))
if (length(gdChannelID) == 2) {
for (ii in 1:length(fs)) {
dataTmp <- fs[[ii]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
# estimate k
# only two Gd channels select the lower expression as contamination coefficient
estimatek <- apply(gdDataTmp, 1, min)
# remove Gd contamination
gdCompensate <- gdDataTmp - matrix(estimatek * gdRatio, dim(gdDataTmp)[1], dim(gdDataTmp)[2])
gdCompensate[gdCompensate < 0] <- 0 # remove negative values
gdCompensate <- gdCompensate + rnorm(length(gdRatio), 1, 1) # add noise
# replace expression data
dataTmp[, gdChannelID] <- gdCompensate
fs[[ii]]@exprs <- dataTmp
}
} else {
for (ii in 1:length(fs)) {
dataTmp <- fs[[ii]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
# estimate k
estimatek <- apply(gdDataTmp, 1, function(cellData) {
cellK <- 0
switch(method,
"1DNorm" = {
obj_1 <- function(x) {
y <- sum(abs(cellData - x * gdRatio))
}
res1 <- optimize(obj_1, interval = c(0, 10000))
res1 <- res1$minimum
cellK <- res1
},
"2DNorm" = {
obj_2 <- function(x) {
y <- sqrt(sum((cellData - x * gdRatio)^2))
}
res2 <- optimize(obj_2, interval = c(0, 10000))
res2 <- res2$minimum
cellK <- res2
},
"Min" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- min(k_vector)
},
"Mean" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- mean(k_vector)
},
"Median" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- median(k_vector)
}
)
return(cellK)
})
##
gdRatio = matrix(gdRatio,nrow = 1)
gdNoiseData = gdRatio[rep(1,length(estimatek)), ] * estimatek
gdCompensate <- gdDataTmp - gdNoiseData
gdCompensate[gdCompensate < 0] <- 0 # remove negative values
# t1 = table(gdCompensate[,1])
# noiseData = matrix(rnorm(dim(gdDataTmp)[1]*dim(gdDataTmp)[2], 1, 1),
#                    dim(gdDataTmp)[1], dim(gdDataTmp)[2])
# gdCompensate <- gdCompensate + noiseData # add noise
# replace expression data
dataTmp[, gdChannelID] <- gdCompensate
fs[[ii]]@exprs <- dataTmp
}
}
return(fs)
}
GdRatios = estimateGdRatio(ff,PercentList)
# plot Gd Ratios
p2 = GdRatioPlot(GdRatios)
p2
# Gd Clean
gdRatio = GdRatios['5%',]
method = '1DNorm'
fs_Clean = GdClean(fs,gdRatio = gdRatio,method = method)
p3 = GdCorrHeatmap(fs_Clean)
p3
inputName = dir(fcs.dir,full.names = F)
outputName = unlist(sapply(inputName, function(x){
t1 = str_split(x,'.fcs')
t2 = paste0(t1[[1]][1],'_GdClean_5.fcs')
t2
}))
write.flowSet(fs_Clean,outdir = '../out',outputName)
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio <- GdNatureTable[rownames(gdInfo), "Abundance"]
naturalRatio <- naturalRatio / naturalRatio[1]
if (is.null(gdRatio)) {
gdRatio <- naturalRatio
}
print(paste0("Gd Ratios = ", paste(gdRatio, collapse = ", ")))
length(gdChannelID) == 2
1:length(fs)
dataTmp <- fs[[ii]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
# estimate k
estimatek <- apply(gdDataTmp, 1, function(cellData) {
cellK <- 0
switch(method,
"1DNorm" = {
obj_1 <- function(x) {
y <- sum(abs(cellData - x * gdRatio))
}
res1 <- optimize(obj_1, interval = c(0, 10000))
res1 <- res1$minimum
cellK <- res1
},
"2DNorm" = {
obj_2 <- function(x) {
y <- sqrt(sum((cellData - x * gdRatio)^2))
}
res2 <- optimize(obj_2, interval = c(0, 10000))
res2 <- res2$minimum
cellK <- res2
},
"Min" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- min(k_vector)
},
"Mean" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- mean(k_vector)
},
"Median" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- median(k_vector)
}
)
return(cellK)
})
##
gdRatio = matrix(gdRatio,nrow = 1)
gdNoiseData = gdRatio[rep(1,length(estimatek)), ] * estimatek
head(gdNoiseData)
gdCompensate <- gdDataTmp - gdNoiseData
gdCompensate[gdCompensate < 0] <- 0 # remove negative values
gdCompensate
table(gdCompensate[,1])
hist(gdCompensate[,1])
?hst
?hist
hist(gdCompensate[,1],xlim = c(-1,5))
hist(gdCompensate[,1],xlim = c(-1,5),100)
hist(gdCompensate[,1],xlim = c(-1,5),nclass = 100)
hist(gdCompensate[,1],xlim = c(-1,5),breaks = 10)
hist(gdCompensate[,1],xlim = c(-1,100),breaks = 10)
hist(gdCompensate[,1],breaks = 10)
hist(gdCompensate[,1],breaks = 100)
hist(gdCompensate[,1],breaks = 1000,xlim = c(-1,5))
hist(gdCompensate[,1],breaks = 10000,xlim = c(-1,5))
hist(gdCompensate[,1],breaks = 100000,xlim = c(-1,5))
##
gdRatio = matrix(gdRatio,nrow = 1)
gdNoiseData = gdRatio[rep(1,length(estimatek)), ] * estimatek
gdCompensate <- gdDataTmp - gdNoiseData
hist(gdCompensate[,1],breaks = 100000,xlim = c(-1,5))
gdCompensate <- gdDataTmp - gdNoiseData
hist(gdCompensate[,1],breaks = 100000,xlim = c(-1,5))
hist(gdDataTmp[,1],breaks = 100000,xlim = c(-1,5))
hist(gdDataTmp[,2],breaks = 100000,xlim = c(-1,5))
hist(gdDataTmp[,3],breaks = 100000,xlim = c(-1,5))
hist(gdDataTmp[,4],breaks = 100000,xlim = c(-1,5))
hist(gdDataTmp[,5],breaks = 100000,xlim = c(-1,5))
hist(gdDataTmp[,2],breaks = 100000,xlim = c(-1,5))
hist(gdDataTmp[,2],breaks = 1000000,xlim = c(-1,5))
hist(gdDataTmp[,3],breaks = 100000,xlim = c(-1,5))
hist(gdDataTmp[,1],breaks = 100000,xlim = c(-1,5))
hist(gdDataTmp[,1],breaks = 100000,xlim = c(-1,5))
hist(gdCompensate[,1],breaks = 100000,xlim = c(-1,5))
head(gdDataTmp)
head(gdNoiseData)
head(gdCompensate)
gdDataTmp <- dataTmp[, gdChannelID]
head(gdDataTmp)
fcs.dir = '../testData/'
frames = lapply(dir(fcs.dir,full.names = T),read.FCS,transformation = F,alter.names = T)
names(frames) <- paste0('data_',1)
fs = as(frames,'flowSet')
gdRatio = NULL
method = "1DNorm"
# dataTmp
gdRatio = NULL
method = "1DNorm"
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio <- GdNatureTable[rownames(gdInfo), "Abundance"]
naturalRatio <- naturalRatio / naturalRatio[1]
if (is.null(gdRatio)) {
gdRatio <- naturalRatio
}
print(paste0("Gd Ratios = ", paste(gdRatio, collapse = ", ")))
inputName = dir(fcs.dir,full.names = F)
inputName
rm(list = ls())
library(GdClean)
library(flowCore)
library(stringr)
library(dplyr)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(mgcv)
library(ggpubr)
fcs.dir = '../testData/'
frames = lapply(dir(fcs.dir,full.names = T),read.FCS,transformation = F,alter.names = T)
names(frames) <- paste0('data_',1)
fs = as(frames,'flowSet')
gdRatio = NULL
method = "1DNorm"
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio <- GdNatureTable[rownames(gdInfo), "Abundance"]
naturalRatio <- naturalRatio / naturalRatio[1]
if (is.null(gdRatio)) {
gdRatio <- naturalRatio
}
print(paste0("Gd Ratios = ", paste(gdRatio, collapse = ", ")))
dataTmp <- fs[[1]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
# estimate k
estimatek <- apply(gdDataTmp, 1, function(cellData) {
cellK <- 0
switch(method,
"1DNorm" = {
obj_1 <- function(x) {
y <- sum(abs(cellData - x * gdRatio))
}
res1 <- optimize(obj_1, interval = c(0, 10000))
res1 <- res1$minimum
cellK <- res1
},
"2DNorm" = {
obj_2 <- function(x) {
y <- sqrt(sum((cellData - x * gdRatio)^2))
}
res2 <- optimize(obj_2, interval = c(0, 10000))
res2 <- res2$minimum
cellK <- res2
},
"Min" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- min(k_vector)
},
"Mean" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- mean(k_vector)
},
"Median" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- median(k_vector)
}
)
return(cellK)
})
##
gdRatio = matrix(gdRatio,nrow = 1)
gdNoiseData = gdRatio[rep(1,length(estimatek)), ] * estimatek
gdRatio
gdNoiseData
head(gdDataTmp)
head(gdNoiseData)
gdCompensate <- gdDataTmp - gdNoiseData
head(gdCompensate)
hist(gdDataTmp[,1],breaks = 100000,xlim = c(-1,5))
hist(gdNoiseData[,1],breaks = 100000,xlim = c(-1,5))
hist(gdCompensate[,1],breaks = 100000,xlim = c(-1,5))
gdCompensate[gdCompensate < 0] <- 0 # remove negative values
hist(gdCompensate[,1],breaks = 100000,xlim = c(-1,5))
hist(gdCompensate[,1],breaks = 100000,xlim = c(-1,5))
dataTmp <- fs[[1]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
# estimate k
estimatek <- apply(gdDataTmp, 1, function(cellData) {
cellK <- 0
switch(method,
"1DNorm" = {
obj_1 <- function(x) {
y <- sum(abs(cellData - x * gdRatio))
}
res1 <- optimize(obj_1, interval = c(0, 10000))
res1 <- res1$minimum
cellK <- res1
},
"2DNorm" = {
obj_2 <- function(x) {
y <- sqrt(sum((cellData - x * gdRatio)^2))
}
res2 <- optimize(obj_2, interval = c(0, 10000))
res2 <- res2$minimum
cellK <- res2
},
"Min" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- min(k_vector)
},
"Mean" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- mean(k_vector)
},
"Median" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- median(k_vector)
}
)
return(cellK)
})
##
gdRatio = matrix(gdRatio,nrow = 1)
gdNoiseData = gdRatio[rep(1,length(estimatek)), ] * estimatek
gdCompensate <- gdDataTmp - gdNoiseData
gdCompensate[gdCompensate < 0] <- 0 # remove negative values
hist(gdDataTmp[,1],breaks = 100000,xlim = c(-1,5))
hist(gdNoiseData[,1],breaks = 100000,xlim = c(-1,5))
hist(gdCompensate[,1],breaks = 100000,xlim = c(-1,5))
dataTmp[, gdChannelID] <- gdCompensate
fs_Clean = fs
fs_Clean[[1]]@exprs <- dataTmp
inputName = dir(fcs.dir,full.names = F)
outputName = unlist(sapply(inputName, function(x){
t1 = str_split(x,'.fcs')
t2 = paste0(t1[[1]][1],'_GdClean_6.fcs')
t2
}))
write.flowSet(fs_Clean,outdir = '../out',outputName)
noiseData = matrix(rnorm(dim(gdDataTmp)[1]*dim(gdDataTmp)[2], 1, 1),
dim(gdDataTmp)[1], dim(gdDataTmp)[2])
gdCompensate <- gdCompensate + noiseData # add noise
dataTmp[, gdChannelID] <- gdCompensate
fs_Clean = fs
fs_Clean[[1]]@exprs <- dataTmp
# output
inputName = dir(fcs.dir,full.names = F)
outputName = unlist(sapply(inputName, function(x){
t1 = str_split(x,'.fcs')
t2 = paste0(t1[[1]][1],'_GdClean_7.fcs')
t2
}))
write.flowSet(fs_Clean,outdir = '../out',outputName)
gdRatio = matrix(gdRatio,nrow = 1)
gdNoiseData = gdRatio[rep(1,length(estimatek)), ] * estimatek
gdCompensate <- gdDataTmp - gdNoiseData
gdCompensate[gdCompensate < 0] <- 0 # remove negative values
noiseData = matrix(runif(dim(gdDataTmp)[1]*dim(gdDataTmp)[2]),
dim(gdDataTmp)[1], dim(gdDataTmp)[2])
gdCompensate <- gdCompensate + noiseData
inputName = dir(fcs.dir,full.names = F)
outputName = unlist(sapply(inputName, function(x){
t1 = str_split(x,'.fcs')
t2 = paste0(t1[[1]][1],'_GdClean_8.fcs')
t2
}))
write.flowSet(fs_Clean,outdir = '../out',outputName)
rm(list = ls())
devtools::document()
library(GdClean)
rm(list = ls())
library(GdClean)
library(flowCore)
library(stringr)
library(dplyr)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(mgcv)
library(ggpubr)
# load fcs files
fcs.dir = '../testData/'
frames = lapply(dir(fcs.dir,full.names = T),read.FCS,transformation = F,alter.names = T)
names(frames) <- paste0('data_',1)
fs = as(frames,'flowSet')
fcs.dir = '../testData/'
frames = lapply(dir(fcs.dir,full.names = T),read.FCS,transformation = F,alter.names = T)
names(frames) <- paste0('data_',1:2)
fs = as(frames,'flowSet')
# Plot Gd Correlation Heatmap
p1 = GdCorrHeatmap(fs)
p1
# Estimate Gd Ratios
PercentList = seq(5,100,5)
ff = fs[[1]]
GdRatios = estimateGdRatio(ff,PercentList)
# plot Gd Ratios
p2 = GdRatioPlot(GdRatios)
p2
# Gd Clean
gdRatio = GdRatios['5%',]
method = '1DNorm'
fs_Clean = GdClean(fs,gdRatio = gdRatio,method = method)
p3 = GdCorrHeatmap(fs_Clean)
p3
inputName = dir(fcs.dir,full.names = F)
inputName = dir(fcs.dir,full.names = F)
outputName = unlist(sapply(inputName, function(x){
t1 = str_split(x,'.fcs')
t2 = paste0(t1[[1]][1],'_GdClean.fcs')
t2
}))
write.flowSet(fs_Clean,outdir = '../out',outputName)
