fs_Clean = GdClean(fs,gdRatio,method = method)
gdRatio = c(1.000000,1.308478,1.004611,1.764121,1.714435)
method = '1DNorm'
fs_Clean = GdClean(fs,gdRatio,method = method)
p3 = GdCorrHeatmap(fs_Clean)
p3
inputName = dir(fcs.dir,full.names = F)
outputName = unlist(sapply(inputName, function(x){
t1 = str_split(x,'.fcs')
t2 = paste0(t1[[1]][1],'_GdClean.fcs')
t2
}))
write.flowSet(fs_Clean,outdir = './out',outputName)
setwd(dir = 'C:\\Users\\ljw\\Documents\\Code\\R\\21-04-06 GdClean')
rm(list = ls())
library(GdClean)
library(flowCore)
library(stringr)
library(dplyr)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(mgcv)
library(ggpubr)
# load fcs files
fcs.dir = './testData/'
frames = lapply(dir(fcs.dir,full.names = T),read.FCS,transformation = F,alter.names = T)
names(frames) <- paste0('data_',1:length(frames))
fs = as(frames,'flowSet')
# Plot Gd Correlation Heatmap
p1 = GdCorrHeatmap(fs)
p1
gdRatio = c(1.000000,1.308478,1.004611,1.764121,1.714435)
method = '1DNorm'
fs_Clean = GdClean(fs,gdRatio,method = method)
inputName = dir(fcs.dir,full.names = F)
outputName = unlist(sapply(inputName, function(x){
t1 = str_split(x,'.fcs')
t2 = paste0(t1[[1]][1],'_GdClean.fcs')
t2
}))
write.flowSet(fs_Clean,outdir = './out',outputName)
setwd(dir = 'C:\\Users\\ljw\\Documents\\Code\\R\\21-04-06 GdClean')
rm(list = ls())
library(GdClean)
library(flowCore)
library(stringr)
library(dplyr)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(mgcv)
library(ggpubr)
# load fcs files
fcs.dir = './testData/'
frames = lapply(dir(fcs.dir,full.names = T),read.FCS,transformation = F,alter.names = T)
names(frames) <- paste0('data_',1:length(frames))
fs = as(frames,'flowSet')
dir(fcs.dir,full.names = T)
p1 = GdCorrHeatmap(fs)
p1
gdRatio = c(1.000000,1.308478,1.004611,1.764121,1.714435)
method = '1DNorm'
fs_Clean = GdClean(fs,gdRatio,method = method)
inputName = dir(fcs.dir,full.names = F)
outputName = unlist(sapply(inputName, function(x){
t1 = str_split(x,'.fcs')
t2 = paste0(t1[[1]][1],'_GdClean_GdR.fcs')
t2
}))
write.flowSet(fs_Clean,outdir = './out',outputName)
setwd(dir = 'C:\\Users\\ljw\\Documents\\Code\\R\\21-04-06 GdClean')
rm(list = ls())
library(GdClean)
library(flowCore)
library(stringr)
library(dplyr)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(mgcv)
library(ggpubr)
fcs.dir = './testData/'
dir(fcs.dir,full.names = T)
frames = lapply(dir(fcs.dir,full.names = T),read.FCS,transformation = F,alter.names = T)
names(frames) <- paste0('data_',1:length(frames))
fs = as(frames,'flowSet')
gdRatio =c(1,1.3831,1.0574,1.6784,1.4770)
method = '1DNorm'
fs_Clean = GdClean(fs,gdRatio,method = method)
inputName = dir(fcs.dir,full.names = F)
outputName = unlist(sapply(inputName, function(x){
t1 = str_split(x,'.fcs')
t2 = paste0(t1[[1]][1],'_GdClean_GdN.fcs')
t2
}))
write.flowSet(fs_Clean,outdir = './out',outputName)
setwd(dir = 'C:\\Users\\ljw\\Documents\\Code\\R\\21-04-06 GdClean')
rm(list = ls())
library(GdClean)
library(flowCore)
library(stringr)
library(dplyr)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(mgcv)
library(ggpubr)
fcs.dir = './testData/'
dir(fcs.dir,full.names = T)
frames = lapply(dir(fcs.dir,full.names = T),read.FCS,transformation = F,alter.names = T)
names(frames) <- paste0('data_',1:length(frames))
fs = as(frames,'flowSet')
# Plot Gd Correlation Heatmap
p1 = GdCorrHeatmap(fs)
p1
# Estimate Gd Ratios
PercentList = seq(5,100,5)
ff = fs[[1]]
GdRatios = estimateGdRatio(ff,PercentList)
# plot Gd Ratios
p2 = GdRatioPlot(GdRatios)
p2
ggsave('./Gd_Ratio_Estimate_plot.pdf',plot = p1,width = 8,height = 3)
ggsave('./Gd_Ratio_Estimate_plot.pdf',plot = p2,width = 8,height = 3)
ggsave('./Gd_Ratio_Estimate_plot.pdf',plot = p2,width = 15,height = 5)
setwd(dir = 'C:\\Users\\ljw\\Documents\\Code\\R\\21-04-06 GdClean')
rm(list = ls())
library(GdClean)
library(flowCore)
library(stringr)
library(dplyr)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(mgcv)
library(ggpubr)
fcs.dir = './testData/'
dir(fcs.dir,full.names = T)
frames = lapply(dir(fcs.dir,full.names = T),read.FCS,transformation = F,alter.names = T)
names(frames) <- paste0('data_',1:length(frames))
fs = as(frames,'flowSet')
ff = fs[1]
ff
ff[1]
ff[[1]]
c;c
clc
ff = ff[[1]]
markerPanel <- ff@parameters@data
View(markerPanel)
str_which(markerPanel$name, c('155','156'))
massChannelID <- str_which(markerPanel$name, c('155','156','157','158','160'))
massChannelID
str_which(markerPanel$name, c('155','156','157','158','160'))
str_which(markerPanel$name, c('155','156','157','158','160'))
?str_which
markerPanel <- ff@parameters@data
massID = c('155','156','157','158','160')
massChannelID = sapply(massID, function(x){
out = str_which(markerPanel$name,x)
out
})
massID
x = massID[1]
x
str_which(markerPanel$name,x)
massID = list(c('155','156','157','158','160'))
massChannelID = sapply(massID, function(x){
out = str_which(markerPanel$name,x)
out
})
massChannelID
massID = list('155','156','157','158','160')
massChannelID = sapply(massID, function(x){
out = str_which(markerPanel$name,x)
out
})
massChannelID
gdChannelName <- markerPanel$name[massChannelID]
gdChannelName
gregexpr("[[:digit:]]+", gdChannelName)
gdMetalID <- as.numeric(unlist(regmatches(gdChannelName, gregexpr("[[:digit:]]+", gdChannelName))))
gdMetalID
gdMetalID <- as.numeric(unlist(regmatches(gdChannelName, gregexpr("[[:digit:]]+", gdChannelName))))
gdInfo <- data.frame(gdChannelID, gdMetalID)
rownames(gdInfo) <- paste0(gdInfo$gdMetalID, "Gd")
gdInfo <- gdInfo %>% arrange(gdMetalID)
gdInfo <- data.frame(massChannelID, gdMetalID)
rownames(gdInfo) <- paste0(gdInfo$gdMetalID, "Gd")
gdInfo <- gdInfo %>% arrange(gdMetalID)
gdChannelNameAll <- paste(rownames(gdInfo), collapse = " ")
print(paste0(length(gdChannelID), " Gadolinium Channels Selected: ", gdChannelNameAll))
gdMetalID <- as.numeric(unlist(regmatches(gdChannelName, gregexpr("[[:digit:]]+", gdChannelName))))
gdInfo <- data.frame(massChannelID, gdMetalID)
rownames(gdInfo) <- paste0(gdInfo$gdMetalID, "Gd")
gdInfo <- gdInfo %>% arrange(gdMetalID)
gdChannelNameAll <- paste(rownames(gdInfo), collapse = " ")
print(paste0(length(massChannelID), " Gadolinium Channels Selected: ", gdChannelNameAll))
gdChannelName
gdChannelNameAll <- paste(rownames(gdChannelName), collapse = " ")
gdChannelNameAll
gdChannelNameAll <- paste(gdChannelName, collapse = " ")
gdChannelNameAll
gdChannelNameAll <- paste(gdChannelName, collapse = " ")
print(paste0(length(massChannelID), " Channels Selected: ", gdChannelNameAll))
gdMetalID <- as.numeric(unlist(regmatches(gdChannelName, gregexpr("[[:digit:]]+", gdChannelName))))
gdInfo <- data.frame(massChannelID, gdMetalID)
rownames(gdInfo) <- paste0(gdInfo$gdMetalID, "Gd")
gdInfo <- gdInfo %>% arrange(gdMetalID)
gdInfo
markerPanel <- ff@parameters@data
massID = list('155','156','157','158','160')
massChannelID = sapply(massID, function(x){
out = str_which(markerPanel$name,x)
out
})
gdChannelName <- markerPanel$name[massChannelID]
massChannelID
markerPanel
markerPanel <- ff@parameters@data
massID = list('155','156','157','158','160')
massChannelID = sapply(massID, function(x){
out = str_which(markerPanel$name,x)
out
})
massChannelName <- markerPanel$name[massChannelID]
massMarkerName <- markerPanel$desc[massChannelID]
massChannelName
massMarkerName
markerPanel <- ff@parameters@data
massID = list('155','156','157','158','160')
massChannelID = sapply(massID, function(x){
out = str_which(markerPanel$name,x)
out
})
massChannelName <- markerPanel$name[massChannelID]
massMarkerName <- markerPanel$desc[massChannelID]
gdInfo <- data.frame(massChannelID, massChannelName,massMarkerName)
rownames(gdInfo) = massID
gdInfo
massChannelName <- markerPanel$name[massChannelID]
massMarkerName <- markerPanel$desc[massChannelID]
massInfo <- data.frame(massChannelID, massChannelName,massMarkerName)
rownames(massInfo) = massID
ChannelNameAll <- paste(massInfo$massMarkerName, collapse = " ")
ChannelNameAll
ChannelNameAll <- paste(massInfo$massMarkerName, collapse = " ")
print(paste0(length(massChannelID), " Channels Selected: ", ChannelNameAll))
gdInfo <- getMassChannels(fs[[1]])
getMassChannels <- function(ff) {
markerPanel <- ff@parameters@data
massID = list('155','156','157','158','160')
massChannelID = sapply(massID, function(x){
out = str_which(markerPanel$name,x)
out
})
massChannelName <- markerPanel$name[massChannelID]
massMarkerName <- markerPanel$desc[massChannelID]
massInfo <- data.frame(massChannelID, massChannelName,massMarkerName)
rownames(massInfo) = massID
ChannelNameAll <- paste(massInfo$massMarkerName, collapse = " ")
print(paste0(length(massChannelID), " Channels Selected: ", ChannelNameAll))
return(massInfo)
}
massInfo <- getMassChannels(fs[[1]])
massInfo
channelPairs <- combn(gdInfo$gdChannelID, 2)
corrHeatmap <- matrix(0, length(fs), dim(channelPairs)[2])
sampleID <- sampleNames(fs)
channelPairs <- combn(massInfo$massChannelID, 2)
corrHeatmap <- matrix(0, length(fs), dim(channelPairs)[2])
sampleID <- sampleNames(fs)
sampleID
corrHeatmap
channelPairs
massInfo <- getMassChannels(fs[[1]])
channelPairs <- combn(massInfo$massChannelID, 2)
corrHeatmap <- matrix(0, length(fs), dim(channelPairs)[2])
sampleID <- sampleNames(fs)
for (ii in 1:length(fs)) {
sampleData <- fs[[ii]]@exprs
corrTmp <- apply(channelPairs, 2, function(x) {
y <- cor(sampleData[, x[1]], sampleData[, x[2]])
y
})
corrHeatmap[ii, ] <- corrTmp
}
markerName <- massInfo$massMarkerName
name1 <- markerName[channelPairs[1, ]]
name2 <- markerName[channelPairs[2, ]]
pairName <- paste(name1, name2, sep = "_")
pairName
markerName <- massInfo$massMarkerName
markerName
markerName <- fs[[1]]@parameters@data$name
name1 <- markerName[channelPairs[1, ]]
name2 <- markerName[channelPairs[2, ]]
pairName <- paste(name1, name2, sep = "_")
pairName
rownames(corrHeatmap) <- sampleID
colnames(corrHeatmap) <- pairName
breaksList <- seq(-1, 1, by = 0.1)
colorList <- colorRampPalette(rev(brewer.pal(7, "RdYlBu")))(length(breaksList))
p1 <- pheatmap(corrHeatmap,
cluster_rows = F, cluster_cols = F,
color = colorList,
breaks = breaksList, angle_col = 90,
display_numbers = round(corrHeatmap, 2)
)
p1
return(p1)
massInfo <- getMassChannels(ff)
# calculated based on the selected flowframe
dataTmp <- ff@exprs
dataTmp <- ff@exprs
gdData <- dataTmp[, massInfo$massChannelID]
gdData <- as.data.frame(gdData)
gdData$mean <- rowMeans(gdData)
dataTmp <- ff@exprs
gdData <- dataTmp[, massInfo$massChannelID]
gdData <- as.data.frame(gdData)
gdData$mean <- rowMeans(gdData)
markerName <- ff@parameters@data$name
gdMarker <- markerName[massInfo$massChannelID]
PairChannel <- 2:length(massInfo$massChannelID)
PercentList = c(1,5,10)
LinearCoeff <- matrix(0, length(PercentList), length(PairChannel))
LinearCoeff <- matrix(0, length(PercentList), length(PairChannel))
for (ii in 1:length(PercentList)) {
gdData_Sub <- gdData %>% top_frac(n = PercentList[ii] / 100, wt = mean)
for (jj in 1:length(PairChannel)) {
data1 <- gdData_Sub[, 1]
data2 <- gdData_Sub[, PairChannel[jj]]
dataTmp <- data.frame(baseChannel = data1, selectChannel = data2)
lmResult <- lm(selectChannel ~ baseChannel, data = dataTmp)
slope <- lmResult$coefficients[2]
LinearCoeff[ii, jj] <- slope
}
}
channelName <- paste(gdMarker[2:length(gdMarker)], gdMarker[1], sep = " to ")
percentName <- paste0(PercentList, "%")
rownames(LinearCoeff) <- percentName
colnames(LinearCoeff) <- channelName
LinearCoeff <- cbind(tmp = 1, LinearCoeff)
colnames(LinearCoeff)[1] <- paste(gdMarker[1], gdMarker[1], sep = " to ")
LinearCoeff
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- c(152, 154, 155, 156, 157, 158, 160)
GdNatureTable
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
GdNatureTable
# Plot
GdRatioName <- colnames(GdRatios)
View(LinearCoeff)
GdRatioN
# Plot
GdRatioName <- colnames(GdRatios)
GdRatios LinaerCoeff
GdRatios =  LinaerCoeff
GdRatios =  LinearCoeff
GdRatios
# Plot
GdRatioName <- colnames(GdRatios)
plotList <- list()
GdRatioName
ii = 2
idTmp <- GdRatioName[ii]
idSub <- unlist(str_split(idTmp, "to"))
GdID_1 <- unlist(regmatches(idSub[1], gregexpr("[[:digit:]]+", idSub[1])))
GdID_2 <- unlist(regmatches(idSub[2], gregexpr("[[:digit:]]+", idSub[2])))
GdID_1
GdID_2
GdID_1 <- intersect(GdID_1, c(152, 154, 155, 156, 157, 158, 160))
GdID_2 <- intersect(GdID_2, c(152, 154, 155, 156, 157, 158, 160))
GdID_1 <- paste0(GdID_1, "Gd")
GdID_2 <- paste0(GdID_2, "Gd")
GdID_1_Abundance <- GdNatureTable[GdID_1, 1]
GdID_2_Abundance <- GdNatureTable[GdID_2, 1]
natureRatio <- GdID_1_Abundance / GdID_2_Abundance
calRatio <- GdRatios[, ii]
calRatio
# plot calculated and nature ratios.
ratioData <- data.frame(calRatio)
ratioData
ratioData$percent <- as.numeric(unlist(regmatches(rownames(ratioData), gregexpr("[[:digit:]]+", rownames(ratioData)))))
p1 <- ggplot(ratioData, aes(x = percent, y = calRatio)) +
geom_point() +
stat_smooth(method = gam, formula = y ~ s(x)) +
geom_hline(
yintercept = natureRatio, color = "red",
linetype = "dashed", size = 1
) +
theme_bw() +
ggtitle(idTmp) +
labs(x = "Top (n)% of Cells", y = "Coefficients of fitted Linear Models") +
scale_x_continuous(breaks = c(1:10) * 10) +
scale_y_continuous(limits = c(0,3)) +
theme(
plot.title = element_text(hjust = 0.5, size = 12),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 12)
)
plotList[[ii - 1]] <- p1
for (ii in 2:length(GdRatioName)) {
idTmp <- GdRatioName[ii]
idSub <- unlist(str_split(idTmp, "to"))
GdID_1 <- unlist(regmatches(idSub[1], gregexpr("[[:digit:]]+", idSub[1])))
GdID_2 <- unlist(regmatches(idSub[2], gregexpr("[[:digit:]]+", idSub[2])))
GdID_1 <- intersect(GdID_1, c(152, 154, 155, 156, 157, 158, 160))
GdID_2 <- intersect(GdID_2, c(152, 154, 155, 156, 157, 158, 160))
GdID_1 <- paste0(GdID_1, "Gd")
GdID_2 <- paste0(GdID_2, "Gd")
GdID_1_Abundance <- GdNatureTable[GdID_1, 1]
GdID_2_Abundance <- GdNatureTable[GdID_2, 1]
natureRatio <- GdID_1_Abundance / GdID_2_Abundance
calRatio <- GdRatios[, ii]
# plot calculated and nature ratios.
ratioData <- data.frame(calRatio)
ratioData$percent <- as.numeric(unlist(regmatches(rownames(ratioData), gregexpr("[[:digit:]]+", rownames(ratioData)))))
p1 <- ggplot(ratioData, aes(x = percent, y = calRatio)) +
geom_point() +
stat_smooth(method = gam, formula = y ~ s(x)) +
geom_hline(
yintercept = natureRatio, color = "red",
linetype = "dashed", size = 1
) +
theme_bw() +
ggtitle(idTmp) +
labs(x = "Top (n)% of Cells", y = "Coefficients of fitted Linear Models") +
scale_x_continuous(breaks = c(1:10) * 10) +
scale_y_continuous(limits = c(0,3)) +
theme(
plot.title = element_text(hjust = 0.5, size = 12),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 12)
)
plotList[[ii - 1]] <- p1
}
p2 <- ggarrange(plotlist = plotList, ncol = length(plotList))
return(p2)
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
# Plot
GdRatioName <- colnames(GdRatios)
plotList <- list()
for (ii in 2:length(GdRatioName)) {
idTmp <- GdRatioName[ii]
idSub <- unlist(str_split(idTmp, "to"))
GdID_1 <- unlist(regmatches(idSub[1], gregexpr("[[:digit:]]+", idSub[1])))
GdID_2 <- unlist(regmatches(idSub[2], gregexpr("[[:digit:]]+", idSub[2])))
GdID_1 <- intersect(GdID_1, c(152, 154, 155, 156, 157, 158, 160))
GdID_2 <- intersect(GdID_2, c(152, 154, 155, 156, 157, 158, 160))
GdID_1 <- paste0(GdID_1, "Gd")
GdID_2 <- paste0(GdID_2, "Gd")
GdID_1_Abundance <- GdNatureTable[GdID_1, 1]
GdID_2_Abundance <- GdNatureTable[GdID_2, 1]
natureRatio <- GdID_1_Abundance / GdID_2_Abundance
calRatio <- GdRatios[, ii]
# plot calculated and nature ratios.
ratioData <- data.frame(calRatio)
ratioData$percent <- as.numeric(unlist(regmatches(rownames(ratioData), gregexpr("[[:digit:]]+", rownames(ratioData)))))
p1 <- ggplot(ratioData, aes(x = percent, y = calRatio)) +
geom_point() +
stat_smooth(method = gam, formula = y ~ s(x)) +
geom_hline(
yintercept = natureRatio, color = "red",
linetype = "dashed", size = 1
) +
theme_bw() +
ggtitle(idTmp) +
labs(x = "Top (n)% of Cells", y = "Coefficients of fitted Linear Models") +
scale_x_continuous(breaks = c(1:10) * 10) +
scale_y_continuous(limits = c(0,3)) +
theme(
plot.title = element_text(hjust = 0.5, size = 12),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 12)
)
plotList[[ii - 1]] <- p1
}
p2 <- ggarrange(plotlist = plotList, ncol = length(plotList))
p2
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
massInfo <- getMassChannels(fs[[1]])
massInfo
massInfo <- getMassChannels(fs[[1]])
gdChannelID <-massInfo$massChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio <- GdNatureTable[rownames(gdInfo), "Abundance"]
naturalRatio <- naturalRatio / naturalRatio[1]
if (is.null(gdRatio)) {
gdRatio <- naturalRatio
}
print(paste0("Gd Ratios = ", paste(gdRatio, collapse = ", ")))
gdRatio = NULL
if (is.null(gdRatio)) {
gdRatio <- naturalRatio
}
print(paste0("Gd Ratios = ", paste(gdRatio, collapse = ", ")))
ii = 1
dataTmp <- fs[[ii]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
dim(gdDataTmp)
devtools::document()
