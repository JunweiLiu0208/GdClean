res2 <- res2$minimum
cellK <- res2
},
"min" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- min(k_vector)
},
"mean" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- mean(k_vector)
},
"median" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- median(k_vector)
}
)
return(cellK)
})
# remove Gd contamination
gdCompensate <- gdDataTmp - matrix(estimatek * gdRatio, dim(gdDataTmp)[1], dim(gdDataTmp)[2])
gdCompensate[gdCompensate < 0] <- 0
gdCompensate <- gdCompensate + rnorm(length(gdRatio), 1, 1)
# change RawData
dataTmp[, gdChannelID] <- gdCompensate
fs[[ii]]@exprs <- dataTmp
}
return(fs)
}
GdClean(fs)
GdClean(fs)
print(exists(gdRatio))
print(exists('gdRatio'))
GdClean(fs)
GdClean()
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
GdNatureTable
gdInfo
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
gdInfo
#' Return the information of used Gadolinium channels in CyTOF data
#'
#' @param ff flowFrame object
#'
#' @return dataFrame of Gd channel ID and related metal Isotope
#' @export
#'
#' @examples
#' library(GdClean)
#' gdInfo <- getGdChannels(ff)
getGdChannels <- function(ff) {
markerPanel <- ff@parameters@data
gdChannelID <- str_which(markerPanel$name, "^Gd")
gdChannelName <- markerPanel$name[gdChannelID]
gdMetalID <- as.numeric(unlist(regmatches(gdChannelName, gregexpr("[[:digit:]]+", gdChannelName))))
gdInfo <- data.frame(gdChannelID, gdMetalID)
rownames(gdInfo) <- paste0(gdInfo$gdMetalID,"Gd")
gdInfo <- gdInfo %>% arrange(gdMetalID)
gdChannelNameAll <- paste(rownames(gdInfo), collapse = " ")
print(paste0(length(gdChannelID), " Gadolinium Channels Selected: ", gdChannelNameAll))
# different channels
if (length(gdChannelID) <= 1) {
errorCondition("GdClean can not work with no more than one Gd channel!")
} else if (length(gdChannelID) == 2) {
print("2 Gd channels detected, the lower expression one will be select as contamination coefficient")
} else if (length(gdChannelID) >= 2) {
}
return(gdInfo)
}
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
gdInfo
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
GdNatureTable
naturalRatio = GdNatureTable[rownames(gdInfo),'Abundance']
naturalRatio
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio = GdNatureTable[rownames(gdInfo),'Abundance']
naturalRatio =naturalRatio / naturalRatio[1]
naturalRatio
!exists('gdRatio')
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio = GdNatureTable[rownames(gdInfo),'Abundance']
naturalRatio =naturalRatio / naturalRatio[1]
if (!exists('gdRatio')) {
gdRatio = naturalRatio
}
print(paste0('Gd Ratios = ',gdRatio))
print(paste('Gd Ratios = ',gdRatio,collapse = ' '))
print(paste0('Gd Ratios = ',paste(gdRatio,collapse = ' ')))
print(paste0('Gd Ratios = ',paste(gdRatio,collapse = ', ')))
#' frames <- lapply(dir(fcs.dir, full.names = T), read.FCS, transformation = F, alter.names = T)
#' names(frames) <- basename(dir(fcs.dir))
#' fs <- as(frames, "flowSet")
#'
#' PercentList <- seq(5, 100, 5)
#' GdRatios <- estimateGdRatio(ff[[1]], percentList)
#'
#' gdRatio <- GdRatios["5%", ]
#' method <- "1DNorm"
#' fs_Clean <- GdClean(fs, gdRatio = gdRatio, method = method)
GdClean <- function(fs, gdRatio, method = '1DNorm') {
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio = GdNatureTable[rownames(gdInfo),'Abundance']
naturalRatio =naturalRatio / naturalRatio[1]
if (!exists('gdRatio')) {
gdRatio = naturalRatio
}
print(paste0('Gd Ratios = ',paste(gdRatio,collapse = ', ')))
for (ii in 1:length(fs)) {
dataTmp <- fs[[ii]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
# estimate k
estimatek <- apply(gdDataTmp, 1, function(cellData) {
cellK <- 0
switch(method,
"1DNorm" = {
obj_1 <- function(x) {
y <- sum(abs(cellData - x * gdRatio))
}
res1 <- optimize(obj_1, interval = c(0, 10000))
res1 <- res1$minimum
cellK <- res1
},
"2DNorm" = {
obj_2 <- function(x) {
y <- sqrt(sum((cellData - x * gdRatio)^2))
}
res2 <- optimize(obj_2, interval = c(0, 10000))
res2 <- res2$minimum
cellK <- res2
},
"min" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- min(k_vector)
},
"mean" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- mean(k_vector)
},
"median" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- median(k_vector)
}
)
return(cellK)
})
# remove Gd contamination
gdCompensate <- gdDataTmp - matrix(estimatek * gdRatio, dim(gdDataTmp)[1], dim(gdDataTmp)[2])
gdCompensate[gdCompensate < 0] <- 0
gdCompensate <- gdCompensate + rnorm(length(gdRatio), 1, 1)
# change RawData
dataTmp[, gdChannelID] <- gdCompensate
fs[[ii]]@exprs <- dataTmp
}
return(fs)
}
GdClean(fs)
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio = GdNatureTable[rownames(gdInfo),'Abundance']
naturalRatio =naturalRatio / naturalRatio[1]
if (!exists('gdRatio')) {
gdRatio = naturalRatio
}
print(paste0('Gd Ratios = ',paste(gdRatio,collapse = ', ')))
gdRatio
GdClean(fs)
#' frames <- lapply(dir(fcs.dir, full.names = T), read.FCS, transformation = F, alter.names = T)
#' names(frames) <- basename(dir(fcs.dir))
#' fs <- as(frames, "flowSet")
#'
#' PercentList <- seq(5, 100, 5)
#' GdRatios <- estimateGdRatio(ff[[1]], percentList)
#'
#' gdRatio <- GdRatios["5%", ]
#' method <- "1DNorm"
#' fs_Clean <- GdClean(fs, gdRatio = gdRatio, method = method)
GdClean <- function(fs, gdRatio, method = '1DNorm') {
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio = GdNatureTable[rownames(gdInfo),'Abundance']
naturalRatio =naturalRatio / naturalRatio[1]
if (!exists('gdRatio')) {
gdRatio = naturalRatio
}
print(paste0('Gd Ratios = ',paste(gdRatio,collapse = ', ')))
for (ii in 1:length(fs)) {
dataTmp <- fs[[ii]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
# estimate k
estimatek <- apply(gdDataTmp, 1, function(cellData) {
cellK <- 0
switch(method,
"1DNorm" = {
obj_1 <- function(x) {
y <- sum(abs(cellData - x * gdRatio))
}
res1 <- optimize(obj_1, interval = c(0, 10000))
res1 <- res1$minimum
cellK <- res1
},
"2DNorm" = {
obj_2 <- function(x) {
y <- sqrt(sum((cellData - x * gdRatio)^2))
}
res2 <- optimize(obj_2, interval = c(0, 10000))
res2 <- res2$minimum
cellK <- res2
},
"min" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- min(k_vector)
},
"mean" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- mean(k_vector)
},
"median" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- median(k_vector)
}
)
return(cellK)
})
# remove Gd contamination
gdCompensate <- gdDataTmp - matrix(estimatek * gdRatio, dim(gdDataTmp)[1], dim(gdDataTmp)[2])
gdCompensate[gdCompensate < 0] <- 0
gdCompensate <- gdCompensate + rnorm(length(gdRatio), 1, 1)
# change RawData
dataTmp[, gdChannelID] <- gdCompensate
fs[[ii]]@exprs <- dataTmp
}
return(fs)
}
GdClean(fs)
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
gdChannelID
gdInfo
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio = GdNatureTable[rownames(gdInfo),'Abundance']
naturalRatio =naturalRatio / naturalRatio[1]
naturalRatio
exists('gdRatio')
!exists('gdRatio')
rm(list = c('gdRatio'))
naturalRatio
GdClean(fs)
GdClean(fs)
GdClean(fs)
#' Cleaning Gd contamination in CyTOF data.
#'
#' @param fs The flowSet object of contaminated CyTOF files.
#' @param gdRatio The selected intensity ratios across Gd channels
#' @param method The method used for calculating contamination coefficient.
#'
#' @return The flowSet object of cleaned CyTOF files.
#' @export
#'
#' @examples
#' library(GdClean)
#'
#' fcs.dir <- "../fcsData/"
#' frames <- lapply(dir(fcs.dir, full.names = T), read.FCS, transformation = F, alter.names = T)
#' names(frames) <- basename(dir(fcs.dir))
#' fs <- as(frames, "flowSet")
#'
#' PercentList <- seq(5, 100, 5)
#' GdRatios <- estimateGdRatio(ff[[1]], percentList)
#'
#' gdRatio <- GdRatios["5%", ]
#' method <- "1DNorm"
#' fs_Clean <- GdClean(fs, gdRatio = gdRatio, method = method)
GdClean <- function(fs, gdRatio, method = '1DNorm') {
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio = GdNatureTable[rownames(gdInfo),'Abundance']
naturalRatio =naturalRatio / naturalRatio[1]
if (!exists('gdRatio')) {
gdRatio = naturalRatio
}
# print(paste0('Gd Ratios = ',paste(gdRatio,collapse = ', ')))
for (ii in 1:length(fs)) {
dataTmp <- fs[[ii]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
# estimate k
estimatek <- apply(gdDataTmp, 1, function(cellData) {
cellK <- 0
switch(method,
"1DNorm" = {
obj_1 <- function(x) {
y <- sum(abs(cellData - x * gdRatio))
}
res1 <- optimize(obj_1, interval = c(0, 10000))
res1 <- res1$minimum
cellK <- res1
},
"2DNorm" = {
obj_2 <- function(x) {
y <- sqrt(sum((cellData - x * gdRatio)^2))
}
res2 <- optimize(obj_2, interval = c(0, 10000))
res2 <- res2$minimum
cellK <- res2
},
"min" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- min(k_vector)
},
"mean" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- mean(k_vector)
},
"median" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- median(k_vector)
}
)
return(cellK)
})
# remove Gd contamination
gdCompensate <- gdDataTmp - matrix(estimatek * gdRatio, dim(gdDataTmp)[1], dim(gdDataTmp)[2])
gdCompensate[gdCompensate < 0] <- 0
gdCompensate <- gdCompensate + rnorm(length(gdRatio), 1, 1)
# change RawData
dataTmp[, gdChannelID] <- gdCompensate
fs[[ii]]@exprs <- dataTmp
}
return(fs)
}
GdClean(fs)
#' Cleaning Gd contamination in CyTOF data.
#'
#' @param fs The flowSet object of contaminated CyTOF files.
#' @param gdRatio The selected intensity ratios across Gd channels
#' @param method The method used for calculating contamination coefficient.
#'
#' @return The flowSet object of cleaned CyTOF files.
#' @export
#'
#' @examples
#' library(GdClean)
#'
#' fcs.dir <- "../fcsData/"
#' frames <- lapply(dir(fcs.dir, full.names = T), read.FCS, transformation = F, alter.names = T)
#' names(frames) <- basename(dir(fcs.dir))
#' fs <- as(frames, "flowSet")
#'
#' PercentList <- seq(5, 100, 5)
#' GdRatios <- estimateGdRatio(ff[[1]], percentList)
#'
#' gdRatio <- GdRatios["5%", ]
#' method <- "1DNorm"
#' fs_Clean <- GdClean(fs, gdRatio = gdRatio, method = method)
GdClean <- function(fs, gdRatio = FALSE, method = '1DNorm') {
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio = GdNatureTable[rownames(gdInfo),'Abundance']
naturalRatio =naturalRatio / naturalRatio[1]
if (gdRatio == FALSE) {
gdRatio = naturalRatio
}
# print(paste0('Gd Ratios = ',paste(gdRatio,collapse = ', ')))
for (ii in 1:length(fs)) {
dataTmp <- fs[[ii]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
# estimate k
estimatek <- apply(gdDataTmp, 1, function(cellData) {
cellK <- 0
switch(method,
"1DNorm" = {
obj_1 <- function(x) {
y <- sum(abs(cellData - x * gdRatio))
}
res1 <- optimize(obj_1, interval = c(0, 10000))
res1 <- res1$minimum
cellK <- res1
},
"2DNorm" = {
obj_2 <- function(x) {
y <- sqrt(sum((cellData - x * gdRatio)^2))
}
res2 <- optimize(obj_2, interval = c(0, 10000))
res2 <- res2$minimum
cellK <- res2
},
"min" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- min(k_vector)
},
"mean" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- mean(k_vector)
},
"median" = {
k_vector <- as.matrix(cellData / gdRatio)
cellK <- median(k_vector)
}
)
return(cellK)
})
# remove Gd contamination
gdCompensate <- gdDataTmp - matrix(estimatek * gdRatio, dim(gdDataTmp)[1], dim(gdDataTmp)[2])
gdCompensate[gdCompensate < 0] <- 0
gdCompensate <- gdCompensate + rnorm(length(gdRatio), 1, 1)
# change RawData
dataTmp[, gdChannelID] <- gdCompensate
fs[[ii]]@exprs <- dataTmp
}
return(fs)
}
GdClean(fs)
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio = GdNatureTable[rownames(gdInfo),'Abundance']
naturalRatio = naturalRatio / naturalRatio[1]
if (is.null(gdRatio)) {
gdRatio = naturalRatio
}
gdRatio = NULL, method = '1DNorm'
gdRatio = NULL
method = '1DNorm'
gdInfo <- getGdChannels(fs[[1]])
gdChannelID <- gdInfo$gdChannelID
GdNatureAbundance <- c(0.0020, 0.0218, 0.1480, 0.2047, 0.1565, 0.2484, 0.2186)
GdNatureTable <- data.frame(Abundance = GdNatureAbundance)
rownames(GdNatureTable) <- paste0(c(152, 154, 155, 156, 157, 158, 160), "Gd")
naturalRatio = GdNatureTable[rownames(gdInfo),'Abundance']
naturalRatio = naturalRatio / naturalRatio[1]
if (is.null(gdRatio)) {
gdRatio = naturalRatio
}
print(paste0('Gd Ratios = ',paste(gdRatio,collapse = ', ')))
gdChannelID
gdChannelID = gdChannelID[1:2]
gdChannelID
ii = 1
dataTmp <- fs[[ii]]@exprs
gdDataTmp <- dataTmp[, gdChannelID]
dataTmp
gdDataTmp <- dataTmp[, gdChannelID]
head(gdDataTmp)
# estimate k
estimatek = apply(gdDataTmp, 1, min)
head(estimatek)
devtools::document()
rm(list = ls())
devtools::document()
styler::style_pkg()
devtools::check()
usethis::use_tidy_github_actions()
rm(list = ls())
library(GdClean)
library(flowCore)
library(stringr)
library(dplyr)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(mgcv)
library(ggpubr)
# load fcs files
fcs.dir = '../testData/'
frames = lapply(dir(fcs.dir,full.names = T),read.FCS,transformation = F,alter.names = T)
names(frames) <- paste0('data_',1)
fs = as(frames,'flowSet')
fs
# Plot Gd Correlation Heatmap
p1 = GdCorrHeatmap(fs)
p1
# Estimate Gd Ratios
PercentList = seq(5,100,5)
ff = fs[[1]]
GdRatios = estimateGdRatio(ff,PercentList)
GdRatios
# plot Gd Ratios
p2 = GdRatioPlot(GdRatios)
p2
